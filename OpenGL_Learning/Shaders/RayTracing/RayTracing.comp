#version 460 core

// // Whether general primitives from the primitive buffer (bind 6) like spheres need to be rendered (disabling can increase perfomance)
// #define TRACE_PRIMITIVES 1


// =====================
// INPUT DATA STRUCTURES
// =====================

// ------
// Camera
// ------

// Contains all useful data about a camera
struct Camera
{
    /*
     * We have to add paddings to each vec3, as they are only 12 bytes of data, but read as 16 bytes (as if it is vec4)
     * paddints help fix the allignment when writing data from CPU to SSBO
     */

    // Location of the camera in world space
    vec3 location;              float pad1;
    
    // Directional vectors of the camera
    vec3 forwardVector;         float pad2;
    vec3 rightVector;           float pad3;
    vec3 upVector;              float pad4;

    // Camera's FOV
    float fieldOfView;

    // Screen aspect ratio (width / height)
    float aspectRatio;
};


// -----
// Light
// -----

//!!!!!!!!!!!!!!!!!!
// NEEDS REDISIGNING
//!!!!!!!!!!!!!!!!!!

// Contains data about a single light source
struct Light
{
    // Light's location in world space
    vec3 location;  // 12
    
    /*
     Type of the light:
        '0' - point light;
        '1' - directional light;
     */
    int type; // 4

    // Color of the light
    vec3 lightColor; // 12

    // Intensity of the light
    float intensity; // 4

    // Forward vector of the light object
    vec3 direction; // 12

    // Softness of the light
    float softness; // 4
};


// --------
// Material
// --------

// Contains data about surface material
struct Material
{
    // Color of the surface
    vec3 color;

    // Roughness of the surface
    float roughness;

    // The strength of the light emited by this material
    float emissionStrength;

    // How metallic the surface is
    float metallic;
    
    // Transparency of the surface (0 - opaque, 1 - transparent)
    float transparency;

    // Index of refraction of transparent materials
    float refractionIndex;          
};


// --------
// Triangle
// --------

// Contains data about a single triangle
struct Triangle
{
    vec3 v1;    float normalX;
    vec3 v2;    float normalY;
    vec3 v3;    float normalZ;
};

// ------
// Object
// ------

// Contains data about a single object
struct Object
{
    // Material ID that will be applied to all triangles of this object
    int materialID;

    // Range of indices of trinagles, that belong to this object
    int bvhStart;
    
    int trianglesStart;

    int pad_2;
};


// --------
// BVH Node
// --------

// Constains data about a single BVH node
struct BVHNode
{
    /*
    minExtent and maxExtent are used for collision testing the boudning box

    lIndex and rIndex can mean two things:
        * If they are positive: they are pointing to the child nodes (as offsets from the root)
        * If they are negative: their absolute values mean: start and endOffset of the corresponding trianlges (LEAF CASE)
    */

    vec3 minExtent;        int lIndex;
    vec3 maxExtent;        int rIndex;
};


/* A strucuture containing data about a generalized primitive
 * Based on the type, the primitive can be interpreted to be:
 *          0 - sphere;
 *          1 - axis alligned cube;
 *
 * P.S. Can be expanded to support more primitive types
 */
struct GeneralPrimitive
{
    vec3 vecOne; 
    float scalar;

    vec3 vecTwo;

    // ID of the primitive's material
    int materialID;

    vec3 vecThree;

    // Type of the primitive: 0 - sphere, 1 - axis alligned cube
    int type;
};



// ================
// INPUTS / OUTPUTS
// ================

// Compute shader input
layout(local_size_x = 8, local_size_y = 8) in; // Defines the size of a working group

// --------------------
// Input / Output Image
// --------------------
layout(rgba32f, binding = 0) uniform image2D outputImage; // Defines the image we are going to be outputting the result to (Texture Unit 0)

// --------
// Uniforms
// --------

// Frame count since last camera movement (used for accumulation)
uniform int frame;

// Parameter uniforms

uniform int rayCount;
uniform int maxBounces;


// -----
// SSBOs
// -----

// Camera SSBO
layout(std430, binding = 0) buffer CameraBuffer 
{
    Camera camera;
};


// Number of lights to process
uniform int lightCount;

// Lights SSBO
layout(std430, binding = 1) buffer LightBuffer 
{
    Light lights[];
};


// Materials SSBO
layout(std430, binding = 2) buffer MaterialBuffer 
{
    Material materials[];
};


// MESH SSBOs

uniform int objectCount;
// Object SSBO
layout(std430, binding = 3) buffer ObjectBuffer 
{
    Object objects[];
};


uniform int bvhCount;
// BVH SSBO
layout(std430, binding = 4) buffer BVH_Buffer 
{
    BVHNode bvhTree[];
};

uniform int triangleCount;
// Triangles SSBO
layout(std430, binding = 5) buffer TriangleBuffer 
{
    Triangle triangles[];
};


// PRIMITIVE SSBO

uniform int primitiveCount;

layout(std430, binding = 6) buffer PrimitiveBuffer
{
    GeneralPrimitive primitives[];
};




// ====================
// IN-SHADER STRUCTURES
// ====================

// ---
// Ray
// ---

// Contains data about a single ray
struct Ray
{
    // Where the ray originates
    vec3 origin;

    // The direction the ray is pointing
    vec3 direction;

    // Maximum tracing distance
    float distance;

    //...

};

// ---
// Hit
// ---

// Contains data about a hit of the ray
struct Hit
{
    // Whether the ray collided with geometry or not
    bool didHit;

    // Id of the object, that was hit
    int objectID;

    // Id of the material, that was hit
    int materialID;

    // Point in space, where the hit was detected
    vec3 location;

    // Distance from the ray's origin to the hit location
    float distance;

    // Surface normal in the hit location
    vec3 normal;
};



// =========
// FUNCTIONS
// =========

// -----------------------
// Random number generator
// -----------------------

// Hash function to generate pseudo-random float based on a 2D seed
float hash(vec2 p) 
{
    vec3 p3 = fract(vec3(p.xyx) * 0.1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

// Pseudo random number generator
float rand(vec2 coords) 
{
    return hash(coords);
}

float randomValue(inout uint state)
{
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;

    return result / 4294967295.0;
}

float normalRandomValue(inout uint state)
{
    float theta = 2 * 3.1415926 * randomValue(state);
    float rho = sqrt(-2 * log(randomValue(state)));

    return rho * cos(theta);
}

vec3 randomDirection(inout uint state)
{
    float x = normalRandomValue(state);
    float y = normalRandomValue(state);
    float z = normalRandomValue(state);

    return normalize(vec3(x, y, z));
}

// Random vector in a hemisphere
vec3 randomHemisphere(vec3 normal, inout uint randomState)
{
    vec3 direction = randomDirection(randomState);
    
    return direction * sign(dot(normal, direction));
}



// --------------------
// Ray collision checks
// --------------------

// Sphere ray collision check
Hit RayCheckSphere(int primitiveID, Ray ray)
{
    Hit outHit;
    outHit.didHit = false;

    vec3 oc = ray.origin - primitives[primitiveID].vecOne;

    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - primitives[primitiveID].scalar * primitives[primitiveID].scalar;

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0) 
    {
        return outHit; // no intersection
    }

    float sqrtDisc = sqrt(discriminant);

    // Return the nearest positive t
    float t0 = (-b - sqrtDisc) / (2.0 * a);
    float t1 = (-b + sqrtDisc) / (2.0 * a);

    outHit.distance = (t0 > 0.0) ? t0 : t1;
    outHit.didHit = outHit.distance > 0.0;
    outHit.location = ray.origin + ray.direction * outHit.distance;
    outHit.normal = normalize(outHit.location - primitives[primitiveID].vecOne);

    outHit.materialID = primitives[primitiveID].materialID;

    return outHit;
}

// Triangle ray collision check
Hit RayCheckTriangle(int triID, Ray ray) 
{
    Hit outHit;
    outHit.didHit = false;

    const float EPSILON = 1e-6;

    vec3 v1 = triangles[triID].v1;

    vec3 edge1 = triangles[triID].v2 - v1;
    vec3 edge2 = triangles[triID].v3 - triangles[triID].v1;

    vec3 h = cross(ray.direction, edge2);
    float a = dot(edge1, h);
    if (abs(a) < EPSILON)
        return outHit; // Ray is parallel to triangle

    float f = 1.0 / a;
    vec3 s = ray.origin - v1;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return outHit;

    vec3 q = cross(s, edge1);
    float v = f * dot(ray.direction, q);
    if (v < 0.0 || u + v > 1.0)
        return outHit;

    float t = f * dot(edge2, q);

    // Ray intersection
    outHit.didHit = t > EPSILON;
    outHit.distance = t;
    outHit.location = ray.origin + ray.direction * t;

    vec3 normal = vec3(triangles[triID].normalX, triangles[triID].normalY, triangles[triID].normalZ);
    //outHit.normal = normal * sign(dot(normal, (-1) * ray.direction));
    outHit.normal = normal;

    return outHit;

}

// BVH ray collision check
bool RayCheckBVHNode(vec3 origin, vec3 invDirection, int bvhNodeID)
{
    vec3 t1 = (bvhTree[bvhNodeID].minExtent - origin) * invDirection;
    vec3 t2 = (bvhTree[bvhNodeID].maxExtent - origin) * invDirection;

    vec3 tMinVec = min(t1, t2);
    vec3 tMaxVec = max(t1, t2);

    float tMin = max(max(tMinVec.x, tMinVec.y), tMinVec.z);
    float tMax = min(min(tMaxVec.x, tMaxVec.y), tMaxVec.z);

    return tMax >= max(tMin, 0.0);
}

// Traverses the bvh tree and checks for collisions
Hit RayCheckBVH(Ray ray, int bvhStart, int trianglesStart)
{
    // Precomputing inverted ray direction (to speed up RayCheckBVHNode calls)
    vec3 invDirection = 1 / ray.direction;

    Hit hit;
    hit.didHit = false;

    hit.distance = 1e20;

    const int MAX_STACK_SIZE = 32;
    int stack[MAX_STACK_SIZE];
    int stackPtr = 0;

    stack[stackPtr++] = bvhStart; // root node index

    while (stackPtr > 0) 
    {
        int nodeIndex = stack[--stackPtr];

        if (!RayCheckBVHNode(ray.origin, invDirection, nodeIndex))
            continue;

        if (bvhTree[nodeIndex].rIndex < 0) 
        {
            int triangleStartIndex = trianglesStart - bvhTree[nodeIndex].lIndex;

            // Leaf node — check triangles
            for (int i = 0; i < (-1 * bvhTree[nodeIndex].rIndex); i++) 
            {
                Hit tempHit = RayCheckTriangle(triangleStartIndex + i, ray);
                
                if (tempHit.didHit) 
                {
                    if (tempHit.distance < hit.distance) 
                    {
                        hit = tempHit;
                    }
                }
            }
        } 
        
        else 
        {
            if (stackPtr + 2 >= MAX_STACK_SIZE) { break; }

            // Push children to the stack
            stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].lIndex;
            stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].rIndex;
            
            // vec3 lPosition = (bvhTree[bvhTree[nodeIndex].lIndex].minExtent + bvhTree[bvhTree[nodeIndex].lIndex].maxExtent) / 2;
            // vec3 rPosition = (bvhTree[bvhTree[nodeIndex].rIndex].minExtent + bvhTree[bvhTree[nodeIndex].rIndex].maxExtent) / 2;
            // if (dot(lPosition - ray.origin, lPosition - ray.origin) < dot(rPosition - ray.origin, rPosition - ray.origin))
            // {
            //     stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].lIndex;
            //     stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].rIndex;
            // }

            // else
            // {
            //     stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].rIndex;
            //     stack[stackPtr++] = bvhStart + bvhTree[nodeIndex].lIndex;
            // }
        }
    }

    return hit;
}


// -----------
// Ray Casting
// -----------

// Casts a ray and returns true, if the ray hit something, puts hit result data into outHit
Hit CastRay(Ray ray)
{

    //Looping over all of the primitives and getting the closest hit
    Hit closestHit;

    Hit localHit;
    closestHit.distance = ray.distance;

    // Checking object intersections
    for (int i = 0; i < objectCount; i++)
    {
        // for (int j = objects[i].trianglesStart; j < objects[i].trianglesStart + objects[i].bvhStart; j++)
        // {
        //     Hit localHit;
            
        //     if (RayCheckTriangle(localHit, triangles[j], ray))
        //     {
        //         localHit.materialID = objects[i].materialID;
        //         closestHit = (localHit.distance < closestHit.distance) ? localHit : closestHit;
        //     }
        // }

        localHit = RayCheckBVH(ray, objects[i].bvhStart, objects[i].trianglesStart);
        localHit.materialID = objects[i].materialID;

        if (localHit.didHit)
        {
            closestHit = (localHit.distance < closestHit.distance) ? localHit : closestHit;
        }
    }

    // Checking primitive intersections
    //#ifdef TRACE_PRIMITIVES

    for (int i = 0; i < primitiveCount; i++)
    {
        // Type 0 - sphere
        if (primitives[i].type == 0)
        {
            localHit = RayCheckSphere(i, ray);
            if (localHit.didHit)
            {
                closestHit = (localHit.distance < closestHit.distance) ? localHit : closestHit;
            }
        }

        // Type 1 - axis alligned cube
        // ...
    }

    //#endif

    closestHit;
    closestHit.didHit = closestHit.distance < ray.distance;

    return closestHit;
}


// --------------
// Color Sampling
// --------------

// Returns the color of the surface in the given point
vec4 SampleSurfaceColor(out float emission, Hit hit)
{
    emission = materials[hit.materialID].emissionStrength;
    return vec4(materials[hit.materialID].color, 1);
}

float CloudSampleFunction(vec3 position)
{
    return (sin(position.x * 1) * sin(position.z * 0.4) + 1) * 0.5;
}

float SampleClouds(vec3 direction, vec3 origin)
{
    float stepLen = 1;

    float sampleMask = clamp(dot(direction, vec3(0, 1, 0)), 0, 1);

    if (sampleMask > 0.1)
    {
        float sampledValue = 0;

        float stepCountValue = 10 / (sampleMask);

        vec3 currentPosition = vec3(0);

        for (int i = 0; i < stepCountValue; i++)
        {
            sampledValue += (CloudSampleFunction(currentPosition) / stepCountValue) * clamp(stepCountValue - i, 0, 1);

            currentPosition += direction * stepLen;
        }

        return sampledValue * pow(sampleMask - 0.1, 0.5);
    }

    return 0;
}

// Returns the color of the sky from a given direction
// @out emission - how much ambient light comes from this direction
vec4 SampleBackgroundColor(out float emission, vec3 direction, vec3 origin)
{
    float verticalFactor = clamp(dot(direction, vec3(0, 1, 0)), 0, 1);
    vec4 skyColor = mix(mix( vec4(0.4, 0.4, 1, 1), vec4(0.1, 0.1, 1, 1), verticalFactor), vec4(1), 0.25);
    vec4 cloudColor = vec4(1);

    vec4 totalSunColor = vec4(0);
    totalSunColor.a = 1;

    float totalBrightness = 1;

    // Looping over all of the lights to find directional lights
    for (int i = 0; i < lightCount; i++)
    {
        float sunMask = pow(clamp(dot(lights[i].direction, direction), 0.0, 1.0), 1000);

        totalBrightness += sunMask * lights[i].intensity;

        //vec4(1.0, 0.7, 0.0, 1.0)
        vec4 sunColorCrown = vec4(lights[i].lightColor, 1);

        vec4 sunColor = mix(sunColorCrown, vec4(1), mix ( sunMask, 1, float(sunMask > 0.9) ));

        totalSunColor += mix(vec4(0), sunColor, float(lights[i].type == 1)) * sunMask;
    }

    //emission = 0;
    //return vec4(0);

    float cloudMask = SampleClouds(direction, origin);

    emission = totalBrightness / (1 + cloudMask * 0.2);
    return mix(skyColor, cloudColor, cloudMask) + totalSunColor;
}


// ---------
// Ray Trace
// ---------

// Does all of the ray tracing logic to render a single pixel of the image
vec4 RayTrace(vec3 origin, vec3 direction, inout uint randomSeed)
{
    const float EPSILON = 1e-5;

    vec4 incomingLight = vec4(0);
    vec4 rayColor = vec4(1);

    // Ray initial setup
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.distance = 100;

    for (int i = 0; i < maxBounces; i++)
    {
        Hit hit = CastRay(ray);

        if (hit.didHit)
        {
            float sampledEmission = 0;
            vec4 sampledColor = mix(SampleSurfaceColor(sampledEmission, hit), vec4(1), materials[hit.materialID].transparency);

            incomingLight += sampledColor * sampledEmission * rayColor;
            rayColor *= mix(vec4(1), sampledColor, materials[hit.materialID].roughness);

            // Refraction
            if (materials[hit.materialID].transparency > 0)
            {
                vec3 normal = hit.normal;
                float ior = materials[hit.materialID].refractionIndex;

                float cosTheta = dot((-1) * ray.direction, normal);
                bool entering = cosTheta > 0.0;

                // Adjust normal and IOR ratio depending on whether we're entering or exiting
                float eta = entering ? (1.0 / ior) : (ior / 1.0);

                // flip normal if exiting
                if (!entering) normal = -normal; 

                // Compute Fresnel reflectance (Schlick's approximation)
                // float r0 = pow((1.0 - ior) / (1.0 + ior), 2.0);
                // float fresnel = r0 + (1.0 - r0) * pow(1.0 - abs(cosTheta), 5.0);          

                // Mix in transparency-based reflect/refract
                // float reflectChance = mix(clamp(fresnel, 0.0, 1 - materials[hit.materialID].transparency), 1.0, 1.0 - materials[hit.materialID].transparency);
                float fresnel = pow(1 - clamp(dot(-ray.direction, normal), 0, 1), 5);
                float reflectChance = mix(fresnel, 1.0, 1.0 - materials[hit.materialID].transparency);

                vec3 refraction = refract(normalize(ray.direction), normalize(normal), eta);
                if (randomValue(randomSeed) > reflectChance && length(refraction) > EPSILON)
                {
                    ray.origin = hit.location + (-1) * normal * EPSILON;
                    ray.direction = refraction;

                    continue;
                }
            }

            // Reflection
            //vec3 cameraFacingNormal = hit.normal * sign(dot(hit.normal, (-1) * ray.direction));
            vec3 cameraFacingNormal = hit.normal;
            ray.origin = hit.location + cameraFacingNormal * EPSILON;
            ray.direction = mix(reflect(ray.direction, normalize(cameraFacingNormal)), randomHemisphere(cameraFacingNormal, randomSeed), materials[hit.materialID].roughness);
        }

        else
        {
            float sampledEmission = 0;
            vec4 sampledColor = SampleBackgroundColor(sampledEmission, ray.direction, ray.origin);
            incomingLight += sampledEmission * sampledColor * rayColor;

            break;
        }
    }
    
    return incomingLight;
}


// =======
// M A I N
// =======

void main() 
{
    uvec2 invocationID = gl_GlobalInvocationID.xy;

    // Calculating uv coordinates
    vec2 uv = vec2(invocationID) / vec2(imageSize(outputImage));
    uv = uv * 2.0 - 1.0;

    // Calculating camera uvs
    vec2 cameraUV = uv;
    cameraUV.x *= camera.aspectRatio;
    cameraUV *= tan(camera.fieldOfView * 0.5); // scale to field of view

    // Render Trace
    vec3 rayDirection = normalize(cameraUV.x * camera.rightVector + cameraUV.y * camera.upVector + camera.forwardVector);

    // Averaging multiple samples to get a good result faster

    int sampleCount = rayCount;
    vec4 currentFrameColor = vec4(0);

    uint randomState = invocationID.y * 641 + invocationID.x + frame * 719393423;

    for (int i = 0; i < sampleCount; i++)
    { 
        currentFrameColor += RayTrace(camera.location, rayDirection, randomState);
    }

    currentFrameColor /= sampleCount;
   
    vec4 finalColor = currentFrameColor;

    // Averaging the result
    vec4 previousFrameColor = imageLoad(outputImage, ivec2(invocationID));
    vec4 averageResult = mix(previousFrameColor, currentFrameColor, 1.0 / float(frame + 1));
    finalColor = averageResult;

    // Storing the result to the image
    imageStore(outputImage, ivec2(invocationID), finalColor);
}
