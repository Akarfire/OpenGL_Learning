#version 460 core

// INPUT DATA STRUCTURES

// Contains all useful data about a camera
struct Camera
{
    /*
     * We have to add paddings to each vec3, as they are only 12 bytes of data, but read as 16 bytes (as if it is vec4)
     * paddints help fix the allignment when writing data from CPU to SSBO
     */

    // Location of the camera in world space
    vec3 location;              float pad1;
    
    // Directional vectors of the camera
    vec3 forwardVector;         float pad2;
    vec3 rightVector;           float pad3;
    vec3 upVector;              float pad4;

    // Camera's FOV
    float fieldOfView;

    // Screen aspect ratio (width / height)
    float aspectRatio;
};

// Contains data about a single light source
struct Light
{
    // Light's location in world space
    vec3 location;  // 12
    
    /*
     Type of the light:
        '0' - point light;
        '1' - directional light;
     */
    int type; // 4

    // Color of the light
    vec3 lightColor; // 12

    // Intensity of the light
    float intensity; // 4

    // Forward vector of the light object
    vec3 direction; // 12

    // Softness of the light
    float softness; // 4
};


// Contains data about surface material
struct Material
{
    // Color of the surface
    vec3 color;

    // Roughness of the surface
    float roughness;
    
    // Self light color of the surface
    vec3 emissionColor;

    // Self light strength
    float emissionStrength;

    // How metallic the surface is
    float metallic;
    
    // Transparency of the surface (0 - opaque, 1 - transparent)
    float transparency;

    // Index of refraction of transparent materials
    float refractionIndex;          
    
    float pad;
};


// INPUT / OUTPUTS

// Inputs
layout(local_size_x = 16, local_size_y = 16) in; // Defines the size of a working group

// Outputs
layout(rgba32f, binding = 0) uniform image2D outputImage; // Defines the image we are going to be outputting the result to (Texture Unit 0)


// Uniforms
uniform int frame;


// Camera
layout(std430, binding = 0) buffer CameraBuffer 
{
    Camera camera;
};


// Number of lights to process
uniform int lightCount;

// Lights
layout(std430, binding = 1) buffer LightBuffer 
{
    Light lights[];
};



// STRUCTS

// Contains data about a single ray
struct Ray
{
    // Where the ray originates
    vec3 origin;

    // The direction the ray is pointing
    vec3 direction;

    // Maximum tracing distance
    float distance;

    //...

};

// Contains data about a hit of the ray
struct Hit
{
    // Id of the object, that was hit
    int objectId;

    // Id of the material, that was hit
    int materialId;

    // Point in space, where the hit was detected
    vec3 location;

    // Distance from the ray's origin to the hit location
    float distance;

    // Surface normal in the hit location
    vec3 normal;
};

// Contains data about a primitive sphere
struct Sphere
{
    // Location of the sphere's center
    vec3 center;

    // Radius of the sphere
    float radius;
};


// FUNCTIONS

// --------------
// RANDOM
// --------------

// Pseudo random number generator
float rand(vec2 coords) 
{
    return fract(sin(dot(coords, vec2(12.9898, 78.233))) * 43758.5453);
}

// Random vector in a hemisphere
vec3 randomHemisphere(vec3 normal, vec2 randUV)
{
    float phi = rand(randUV) * 2.0 * 3.14159;
    float cosTheta = rand(randUV + 0.1234);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 tangent = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    vec3 bitangent = cross(normal, tangent);

    return normalize(
        sinTheta * cos(phi) * tangent +
        sinTheta * sin(phi) * bitangent +
        cosTheta * normal
    );
}



// --------------
// Ray collision checks
// --------------

// Sphere ray collision check
bool RayCheckSphere(out Hit outHit, Sphere sphere, Ray ray)
{
    vec3 oc = ray.origin - sphere.center;

    float a = dot(ray.direction, ray.direction);         // Often 1.0
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0) 
    {
        return false; // no intersection
    }

    float sqrtDisc = sqrt(discriminant);

    // Return the nearest positive t
    float t0 = (-b - sqrtDisc) / (2.0 * a);
    float t1 = (-b + sqrtDisc) / (2.0 * a);

    outHit.distance = (t0 > 0.0) ? t0 : t1;
    outHit.location = ray.origin + ray.direction * outHit.distance;
    outHit.normal = normalize(outHit.location - sphere.center);

    return outHit.distance > 0.0;
}


// --------------
// General Ray Tracing
// --------------

// Traces a ray and returns true, if the ray hit something, puts hit result data into outHit
bool RayTrace(out Hit outHit, Ray ray)
{
    // Sphere example
    Sphere sphere1;
    sphere1.center = vec3(2, 0, 0);
    sphere1.radius = 1;

    Sphere sphere2;
    sphere2.center = vec3(-3, -3, -3);
    sphere2.radius = 2;

    Sphere spheres[2] = Sphere[](sphere1, sphere2);

    // Looping over all of the primitives and getting the closest hit
    Hit closestHit;
    closestHit.distance = ray.distance;

    for (int i = 0; i < spheres.length(); i++)
    {
        Hit localHit;
        if (RayCheckSphere(localHit, spheres[i], ray))
        {
            closestHit = (localHit.distance < closestHit.distance) ? localHit : closestHit;
        }
    }

    outHit = closestHit;
    return closestHit.distance < ray.distance;
}


// --------------
// Shadow Sampling
// --------------

// Checks whether the hit point is in shadow from a given light direction
bool ShadowTrace(Hit hit, vec3 lightDirection)
{
    Ray lightTraceRay;
    lightTraceRay.origin = hit.location + hit.normal * 0.001;
    lightTraceRay.direction = lightDirection;
    lightTraceRay.distance = 100;

    Hit lightTraceHit;
    return RayTrace(lightTraceHit, lightTraceRay);
}

// Checks whether the hit point is in shadow from a light
float SampleShadow(Hit hit, Light light, vec2 randomSeed)
{
    float shadow = 0;

    int baseSamples = 3;
    int extraSamples = 16;
    float extraThreshold = 0.2;

    // Determining the light direction based on the light type
    vec3 lightDirection = mix(light.location - hit.location, light.direction, float(light.type == 1));

    int shadowCouter = 0;
    for (int i = 0; i < baseSamples; i++)
    {
        shadowCouter += int(ShadowTrace(hit, normalize(lightDirection + randomHemisphere(hit.normal, randomSeed + float(i) * 12.37) * light.softness)));
    }

    float divergense = 1 - (shadowCouter / baseSamples);

    shadow = mix(0, 1, float(shadowCouter > 0));

    if (divergense > extraThreshold)
    {
        for (int i = 0; i < extraSamples; i++)
        {
            vec3 localLightDirection =  normalize(lightDirection + randomHemisphere(hit.normal, randomSeed + float(i + baseSamples) * 12.37) * light.softness);
            bool inShadow = ShadowTrace(hit, localLightDirection);

            shadow = shadow + float(inShadow);
        }

        shadow /= extraSamples;
    }

    return shadow;
}


// --------------
// Full processing of the object
// --------------

vec4 ShadeObject(Hit hit, vec2 randomSeed)
{
    vec4 color = vec4(0);

    float ambientLight = 0.65;

    vec4 lightColor = vec4(0);

    for (int i = 0; i < lightCount; i++)
    {
        // Determining the light direction based on the light type
        vec3 lightDirection = mix(lights[i].location - hit.location, lights[i].direction, float(lights[i].type == 1));

        float localLightAmmount = 1; 

        // Sampling shadows
        localLightAmmount *= (1 - SampleShadow(hit, lights[i], randomSeed));

        // Applying light's intensity
        float lightDistance = dot(hit.location - lights[i].location, hit.location - lights[i].location);
        localLightAmmount *= mix (lights[i].intensity / lightDistance, lights[i].intensity, float(lights[i].type == 1));

        // Applying normal based shading
        localLightAmmount = min(localLightAmmount, clamp(dot(hit.normal, lightDirection), 0, 1));

        // Adding to the light color
        lightColor += vec4(lights[i].lightColor, 1) * localLightAmmount / lights[i].intensity;
    }

    // Ambient light
    lightColor += ambientLight * vec4(0.4, 0.4, 1, 1);

    // Normalizing lightColor
    float maxIntensity = max(lightColor.r, max(lightColor.g, lightColor.b));
    if (maxIntensity > 1.0) lightColor /= maxIntensity;

    return vec4(1) * lightColor;    
}


// --------------
// Processing of the background
// --------------

vec4 ShadeBackground(vec3 origin, vec3 direction)
{
    float verticalFactor = clamp(dot(direction, vec3(0, 1, 0)), 0, 1);

    vec4 skyColor = mix( vec4(0.4, 0.4, 1, 1), vec4(0.1, 0.1, 1, 1), verticalFactor);

    // float sunFactor = pow(clamp(dot(direction, lightDirection), 0, 1), 20);
    // sunFactor = mix(sunFactor, 1, float(sunFactor > 0.001));
    //vec4 sunColor = mix(vec4(1, 1, 0, 1), vec4(1), sunFactor);

    vec4 totalSunColor = vec4(0);
    totalSunColor.a = 1;

    for (int i = 0; i < lightCount; i++)
    {
        float sunMask = pow(clamp(dot(lights[i].direction, direction), 0.0, 1.0), 100 / lights[i].intensity * 10);
        sunMask = pow(sunMask, 0.2);

        //vec4(1.0, 0.7, 0.0, 1.0)
        vec4 sunColorCrown = vec4(lights[i].lightColor, 1);

        vec4 sunColor = mix(sunColorCrown, vec4(1), mix ( sunMask, 1, float(sunMask > 0.9) ));

        totalSunColor += mix(vec4(0), sunColor, float(lights[i].type == 1)) * sunMask;
    }

    //return mix(skyColor, totalSunColor, sunMask);
    return skyColor + totalSunColor;
}


// --------------
// Actual tracing with reflections
// --------------

vec4 RenderTrace(vec3 origin, vec3 direction, vec2 randomSeed)
{
    // Recursive params
    vec3 currentOrigin = origin;
    vec3 currentDirection = direction;
    float attenuation = 2;

    vec4 surfaceColor = vec4(0);
    vec4 reflectionColor = vec4(0);

    int depth = 0;
    for (depth = 0; depth < 2; depth++)
    {
        // Ray settings
        Ray ray;
        ray.origin = currentOrigin;
        ray.direction = currentDirection;
        ray.distance = 100;

        // Tracing
        Hit hit;
        bool didHit = RayTrace(hit, ray);

        vec4 localColor = attenuation * mix(ShadeBackground(ray.origin, ray.direction),
                              ShadeObject(hit, randomSeed),
                              float(didHit));

        surfaceColor = mix(surfaceColor, localColor, float(depth == 0));
        reflectionColor += mix(vec4(0), localColor, float(depth > 0));

        if (!didHit)
            break;

        // Reflect the ray
        currentOrigin = hit.location + hit.normal * 0.001;
        currentDirection = reflect(currentDirection, hit.normal);

        // Reduce contribution of further bounces
        attenuation *= 0.5;
    }

    vec4 color = mix(surfaceColor, mix(reflectionColor, surfaceColor, 0.5), float(depth > 0));

    color.a = 1.0;
    return color;
}




// --------------
// MAIN
// --------------

void main() 
{
    uvec2 invocationID = gl_GlobalInvocationID.xy;

    // Calculating uv coordinates
    vec2 uv = vec2(invocationID) / vec2(imageSize(outputImage));
    uv = uv * 2.0 - 1.0;

    // Calculating camera uvs
    vec2 cameraUV = uv;
    cameraUV.x *= camera.aspectRatio;
    cameraUV *= tan(camera.fieldOfView * 0.5); // scale to field of view

    // Render Trace
    vec3 rayDirection = normalize(cameraUV.x * camera.rightVector + cameraUV.y * camera.upVector + camera.forwardVector);
    vec2 randomSeed = vec2(invocationID) + + vec2(frame * 17, frame * 43);

    vec4 color = RenderTrace(camera.location, rayDirection, randomSeed);
   
    // Averaging the result
    vec4 previousFrameColor = imageLoad(outputImage, ivec2(invocationID));
    vec4 averageResult = mix(previousFrameColor, color, 1.0 / float(frame + 1));

    // Storing the result to the image
    imageStore(outputImage, ivec2(invocationID), averageResult);
}